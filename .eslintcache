[{"/Users/vivianabenitez/Desktop/ProyectoGS1/GS1-Final-Project/src/componentes/SignUp.js":"1","/Users/vivianabenitez/Desktop/ProyectoGS1/GS1-Final-Project/src/App.js":"2","/Users/vivianabenitez/Desktop/ProyectoGS1/GS1-Final-Project/src/componentes/PagePrincipal.js":"3","/Users/vivianabenitez/Desktop/ProyectoGS1/GS1-Final-Project/src/reportWebVitals.js":"4"},{"size":5132,"mtime":1607454638450,"results":"5","hashOfConfig":"6"},{"size":2314,"mtime":1607128189628,"results":"7","hashOfConfig":"6"},{"size":269,"mtime":1607128058276,"results":"8","hashOfConfig":"6"},{"size":362,"mtime":1607123775212,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"16lgyth",{"filePath":"12","messages":"13","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/vivianabenitez/Desktop/ProyectoGS1/GS1-Final-Project/src/componentes/SignUp.js",["21"],"/Users/vivianabenitez/Desktop/ProyectoGS1/GS1-Final-Project/src/App.js",["22","23","24","25","26","27"],"\nimport { useState, Fragment } from 'react';\nimport React from 'react'\nimport {auth} from './firebaseConfig';\nimport SignUp from './componentes/SignUp';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport PagePrincipal from './componentes/PagePrincipal';\n\nfunction App() {\n\n\n  /**\n   * Explica el hook de useState, la inicializacion y que se pueden usar varios estados en el componente,\n   * que es mejor que cada componente controle susestado y no un estado global.\n   * \n   * Explica tambien la destructuracion de objetos en Javascript o Typescript (obtener datos desde un array,\n   * porque al final el useState nos devuelve un array de 2 posiciones, primero con el estado y el metodo \n   * para actualizarse)\n   */\n  const [user, setUser] = useState([]);\n  const [isSignIn, setSignIn] = useState(false);\n\n  function login() {\n    /**\n     * Explica aqui que importas el auth y lo configuras en firebaseConfig.js, y el then es por lo de las promesas\n     * que es una funciona asincrona. Y cuando se cumple satisfactoriamente actualizas el estado. De esta\n     * forma se actualiza la vista.\n     */\n    auth.signInWithEmailAndPassword(\"pepe@gmail.com\", \"elpepe\")\n    .then(operation => {\n      setSignIn(true);\n      setUser(operation.user);\n      console.log(operation.user);\n    })\n  }\n\n  function logout() {\n    auth.signOut();\n    setUser([]);\n    setSignIn(false);\n  }\n\n\n  /**\n   * Aqui que solo pueden devolver un componente, si no quieren usar un div, pues React.Fragment.\n   * El onClick y que para hacer un if tiene que ser con el ternario.\n   */\n  return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={PagePrincipal}/>\n          <Route exact path=\"/signUp\" component={SignUp}/>\n          {/* <Route exact path=\"/login\" component={Login}/> */}\n        </Switch>\n      </Router>\n      // {/* <SignIn/> */}\n      // {/* { isSignIn ? \n      // <React.Fragment>\n      //   <button onClick={logout}>Cerrar sesión</button> \n      //   <h2>Bienvenido a la aplicacion: {user.email}</h2>\n      // </React.Fragment>\n      // : \n      // <Fragment>\n      //     <button onClick={login}>Iniciar sesión</button>\n      //     <Link to={'/signIn'}>Crear cuenta</Link>\n      // </Fragment>\n        \n      // }       */}\n\n  );\n}\n\nexport default App;\n",["28","29"],"/Users/vivianabenitez/Desktop/ProyectoGS1/GS1-Final-Project/src/componentes/PagePrincipal.js",[],"/Users/vivianabenitez/Desktop/ProyectoGS1/GS1-Final-Project/src/reportWebVitals.js",[],["30","31"],{"ruleId":"32","severity":1,"message":"33","line":2,"column":10,"nodeType":"34","messageId":"35","endLine":2,"endColumn":16},{"ruleId":"32","severity":1,"message":"36","line":2,"column":20,"nodeType":"34","messageId":"35","endLine":2,"endColumn":28},{"ruleId":"32","severity":1,"message":"37","line":6,"column":50,"nodeType":"34","messageId":"35","endLine":6,"endColumn":54},{"ruleId":"32","severity":1,"message":"38","line":20,"column":10,"nodeType":"34","messageId":"35","endLine":20,"endColumn":14},{"ruleId":"32","severity":1,"message":"39","line":21,"column":10,"nodeType":"34","messageId":"35","endLine":21,"endColumn":18},{"ruleId":"32","severity":1,"message":"40","line":23,"column":12,"nodeType":"34","messageId":"35","endLine":23,"endColumn":17},{"ruleId":"32","severity":1,"message":"41","line":37,"column":12,"nodeType":"34","messageId":"35","endLine":37,"endColumn":18},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"42","replacedBy":"46"},{"ruleId":"44","replacedBy":"47"},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","'Link' is defined but never used.","'user' is assigned a value but never used.","'isSignIn' is assigned a value but never used.","'login' is defined but never used.","'logout' is defined but never used.","no-native-reassign",["48"],"no-negated-in-lhs",["49"],["48"],["49"],"no-global-assign","no-unsafe-negation"]